name: 'Version Check'

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/Version_Check.yml'
  schedule:
    - cron: '0 */6 * * *'  # 每6小时运行一次

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.HASS_TOKEN }}

      - name: Prepare Environment
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Check AList TVbox Version
        run: |
          # 读取本地版本（清理格式）
          VERSION=$(yq eval '.version' alist-tvbox/config.yaml | tr -d "'\n\r ")

          echo "Start checking version of alist-tvbox"

          # 获取远程内容（第一行为版本号，剩余为更新日志）
          REMOTE_CONTENT=$(curl -fsSL http://d.har01d.cn/app_version || echo "")  # 失败时返回空

          # 解析版本号（去除非标准前缀和空格）
          REMOTE_VERSION=$(echo "$REMOTE_CONTENT" | head -n 1 | xargs echo -n)  # 取第一行并清理空格

          # 若远程版本无效，回退本地版本
          [ -z "$REMOTE_VERSION" ] && REMOTE_VERSION="$VERSION"

          # 解析更新日志（处理换行符和特殊字符）
          REMOTE_CHANGELOG=$(echo "$REMOTE_CONTENT" | tail -n +2 | sed '/^$/d')  # 取剩余行并删除空行

          echo "Local Version: '$VERSION'"
          echo "Remote Version: '$REMOTE_VERSION'"

          # 版本比较逻辑
          if [ -n "$REMOTE_VERSION" ] && [ "$REMOTE_VERSION" != "$VERSION" ]; then
            echo "New version detected: $REMOTE_VERSION"

            # 检测到更新时设置变量
            echo "should_push=true" >> $GITHUB_ENV

            # 更新配置文件版本号
            yq eval ".version = \"$REMOTE_VERSION\"" -i alist-tvbox/config.yaml

            # 生成带时间戳的更新日志（格式化为Markdown）
            TIMESTAMP=$(date -u +"%Y-%m-%d")
            printf "### %s (%s)\n%s\n\n" "$REMOTE_VERSION" "$TIMESTAMP" "$REMOTE_CHANGELOG" > temp_changelog.md

            # 合并到 CHANGELOG.md 前部
            if [ -f "alist-tvbox/CHANGELOG.md" ]; then
              cat temp_changelog.md alist-tvbox/CHANGELOG.md > combined_changelog.md
              mv combined_changelog.md alist-tvbox/CHANGELOG.md
            else
              mv temp_changelog.md alist-tvbox/CHANGELOG.md
            fi

            # 清理临时文件
            rm -f temp_changelog.md combined_changelog.md

            # 提交变更
            git add .
            git commit -m "alist-tvbox: Bump version to $REMOTE_VERSION."

            # 输出构建标志
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged: $VERSION"
          fi

      - name: Check Lucky Version
        run: |
          # 读取本地版本（清理格式）
          VERSION=$(yq eval '.version' lucky/config.yaml | tr -d "'\n\r ")

          echo "Start checking version of Lucky"

          # 获取 GitHub Release 信息（带重试和超时）
          REMOTE_CONTENT=$(wget -qO- -t2 -T10 "https://api.github.com/repos/gdy666/lucky/releases/latest" || echo "")

          # 解析版本号（去除非标准前缀和空格）
          REMOTE_VERSION=$(echo "$REMOTE_CONTENT" | jq -r '.tag_name // empty' | sed -e 's/^v//' -e 's/[[:space:]]//g')
          [ -z "$REMOTE_VERSION" ] && REMOTE_VERSION="$VERSION"  # 失败回退

          # 解析更新日志（处理换行符和特殊字符）
          REMOTE_CHANGELOG=$(echo "$REMOTE_CONTENT" | jq -r '.body // empty' | sed -e 's/\\r\\n/\n/g' -e 's/[[:space:]]*$//' -e 's/_/\\_/g' -e 's/\*/\\*/g')

          echo "Local Version: '$VERSION'"
          echo "Remote Version: '$REMOTE_VERSION'"

          # 版本比较逻辑
          if [[ -n "$REMOTE_VERSION" && "$REMOTE_VERSION" != "$VERSION" ]]; then
            echo "New version detected: $REMOTE_VERSION"

            # 检测到更新时设置变量
            echo "should_push=true" >> $GITHUB_ENV

            # 更新配置文件版本号
            yq eval ".version = \"$REMOTE_VERSION\"" -i lucky/config.yaml

            # 生成带时间戳的更新日志（Markdown 格式化）
            TIMESTAMP=$(date -u +"%Y-%m-%d")
            printf "### %s (%s)\n%s\n\n" "$REMOTE_VERSION" "$TIMESTAMP" "$REMOTE_CHANGELOG" > temp_changelog.md

            # 合并到 CHANGELOG.md 前部
            if [ -f "lucky/CHANGELOG.md" ]; then
              cat temp_changelog.md lucky/CHANGELOG.md > combined_changelog.md
              mv combined_changelog.md lucky/CHANGELOG.md
            else
              mkdir -p lucky
              mv temp_changelog.md lucky/CHANGELOG.md
            fi

            # 清理临时文件
            rm -f temp_changelog.md combined_changelog.md

            # 提交变更（检查是否有实际修改）
            if git diff --quiet; then
              echo "No changes to commit."
            else
              git add .
              git commit -m "Lucky: Bump version to $REMOTE_VERSION."
            fi

            # 输出构建标志
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged: $VERSION"
          fi

      - name: Push changes to addons repo
        if: env.should_push == 'true'
        run: |
          git push origin main
